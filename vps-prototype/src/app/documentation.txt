This is a diary type documentation of my progress on this prototype. I wont cover everything, but I try my best to write highlights here and some thoughts. This is pretty much freestyle writing process.

When I started developing this prototype first thing was to make a GitHub repository for this project. I simply called it VPS_masters_thesis. It is a public folder which means everyone can go there and have a look at my code. Then I proceed to clone my repository to my pc and when I had cloned it, I made a decision to build this prototype with Next.JS. I went to their website and followed the installization guide. 

When I got the Next.JS correctly setupped, I started playing around with different methods which I was planning to be implemented on my prototype. My experience with Next.JS is pretty much nothing so it was a good idea for me to play around with some basic elements. I made some basic text area and buttons and made some logic to them like pressing button shows text area and writing to text area and pushing a button gives some kind of response. I also made a simply activity log which logs user activity in chronological order (pushing buttons and giving diagnoses). These experiments was really simple and gave me a good view for the real implementation of these methods. None of these methods send any data to database, they only gave a visual notification to me in the webpage.

When I was done with the experiments, I proceed to make my project stucture more cleaner. I looked up in the Next.JS documentation and searched multiple Internet sources for structuring my project. I found out multiple good practices which enchances my project structure. Firstly, a single page can be placed in a folder named after that page and in that folder you make a new file which is called page.tsx. This is done with the intention of simple routing. The folder acts like a router. These folders can be placed inside a folder which is called nesting. For example, I made a folder called: pages where I put every single page folder. This way it is easy to find my pages and routing in the webpage is simple. For example, path to my simulation page is: localhost:3000/pages/simulation where pages is my page folder name and simulation is my simulation folder name. I made total of 3 different pages which are login, register, and simulation. I also have the default page which is outside of this folder. I was thinking I will make something out of it in the future. For now, It only has a button to my simulation page. 

After I structured my project properly, I made the decision to not use Node.JS for my backend. This project is only a prototype, so using Node.JS is a bit unnecessary. I made api folder where I made backend code for login and register. I also added .env.local file to my project where I putted my database information in. I also made lib folder where is my database connection file. After I made these files and folders, I tested my code with Postman. I had to make several corrections in my code to get positive results back from Postman. But my code works and I made simple login and registeration pages, which works also. Those pages dont have any logic behind them, but registeration page makes a new user to the database. My next plan is to give those pages some logic like after successful login the user would be directed to simulation page and after succesful registeration user would be directed to the login page. I wont waste too much time on these because these are kind of unnecessary for the prototype, but I want to implement these anyways. These will be helpful in the future, because it is easier to implement activity log for a specific user.

Now I have made it that login and register pages redirect users. Login redirect to simulation page and register redirects to login page. I have also modified the layout.tsx file to present a navbar in every different page. I also made some global css editing. The big thing I added to my prototype is that when users login into the website, they generate a token which tracks their session. I updated the login api to generate a JWT(jsonwebtoken) token, so when users logs in succesfully the token is generated which is stored in cookies. I also added a new api which checks users authentication. This is used in the navbar for example. When users are succesfully logged in the navbar lets the user know it with a welcome text which says "Welcome, username". This also helps me to develop my prototype further, because I know that my user is logged in succesfully and I can develop my activity log further. My idea with the activity log is simple. Users are logged in the simulation and my token tracks the session and when users presses buttons, writes in text areas, the data would be stored in database. The user and activity log would be connected with userId perhaps. Next I will work on this activity log system and hopefully I figure out some kind of good system. 