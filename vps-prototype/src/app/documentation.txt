This is a diary type documentation of my progress on this prototype. I wont cover everything, but I try my best to write highlights here and some thoughts. This is pretty much freestyle writing process.

When I started developing this prototype first thing was to make a GitHub repository for this project. I simply called it VPS_masters_thesis. It is a public folder which means everyone can go there and have a look at my code. Then I proceed to clone my repository to my pc and when I had cloned it, I made a decision to build this prototype with Next.JS. I went to their website and followed the installization guide. 

When I got the Next.JS correctly setupped, I started playing around with different methods which I was planning to be implemented on my prototype. My experience with Next.JS is pretty much nothing so it was a good idea for me to play around with some basic elements. I made some basic text area and buttons and made some logic to them like pressing button shows text area and writing to text area and pushing a button gives some kind of response. I also made a simply activity log which logs user activity in chronological order (pushing buttons and giving diagnoses). These experiments was really simple and gave me a good view for the real implementation of these methods. None of these methods send any data to database, they only gave a visual notification to me in the webpage.

When I was done with the experiments, I proceed to make my project stucture more cleaner. I looked up in the Next.JS documentation and searched multiple Internet sources for structuring my project. I found out multiple good practices which enchances my project structure. Firstly, a single page can be placed in a folder named after that page and in that folder you make a new file which is called page.tsx. This is done with the intention of simple routing. The folder acts like a router. These folders can be placed inside a folder which is called nesting. For example, I made a folder called: pages where I put every single page folder. This way it is easy to find my pages and routing in the webpage is simple. For example, path to my simulation page is: localhost:3000/pages/simulation where pages is my page folder name and simulation is my simulation folder name. I made total of 3 different pages which are login, register, and simulation. I also have the default page which is outside of this folder. I was thinking I will make something out of it in the future. For now, It only has a button to my simulation page. 

After I structured my project properly, I made the decision to not use Node.JS for my backend. This project is only a prototype, so using Node.JS is a bit unnecessary. I made api folder where I made backend code for login and register. I also added .env.local file to my project where I putted my database information in. I also made lib folder where is my database connection file. After I made these files and folders, I tested my code with Postman. I had to make several corrections in my code to get positive results back from Postman. But my code works and I made simple login and registeration pages, which works also. Those pages dont have any logic behind them, but registeration page makes a new user to the database. My next plan is to give those pages some logic like after successful login the user would be directed to simulation page and after succesful registeration user would be directed to the login page. I wont waste too much time on these because these are kind of unnecessary for the prototype, but I want to implement these anyways. These will be helpful in the future, because it is easier to implement activity log for a specific user.

Now I have made it that login and register pages redirect users. Login redirect to simulation page and register redirects to login page. I have also modified the layout.tsx file to present a navbar in every different page. I also made some global css editing. The big thing I added to my prototype is that when users login into the website, they generate a token which tracks their session. I updated the login api to generate a JWT(jsonwebtoken) token, so when users logs in succesfully the token is generated which is stored in cookies. I also added a new api which checks users authentication. This is used in the navbar for example. When users are succesfully logged in the navbar lets the user know it with a welcome text which says "Welcome, username". This also helps me to develop my prototype further, because I know that my user is logged in succesfully and I can develop my activity log further. My idea with the activity log is simple. Users are logged in the simulation and my token tracks the session and when users presses buttons, writes in text areas, the data would be stored in database. The user and activity log would be connected with userId perhaps. Next I will work on this activity log system and hopefully I figure out some kind of good system. 

Now I have made a simple activity log system and got it working. I was having trouble at first and debugging took me a while to find what I did wrong. In my log route.ts I named my user_id as userId and that gave me undefined user_id errors. But now I got this activity log working and it logs user button clicks for now. The log entries are stored in the database with simple table which consist of: autogenerated id, user_id, type(what action user did, for example Button Click), message(Buttons have message Clicked button: button name), and timestamp. Next, I will make some modification to the activity log such as logging user written text etc.

I made logout button to work just to see if my activity log works on different users. The activity log works fine with every different users. The activity log has a small problem, that it only works after manually refreshing the page after login. I tried to came up with some fix for it, but I did not waste too much time for it. This is a prototype and bugs like this is not that harmful. First fix that came up to my mind is to redirect user into different page. I decided to move forwards for now and next I was thinking to make the activity log work on text areas.

I got the activity log to work on text areas. The activity logs the text area only when submit button is pressed. I made this decision because this way the database would not be flooded with useless text area logs. It is also easier for me to take the logs out from the database and give the users a chronological activity log after they have done the simulation. I think this will need some tweaks in the future(like every component), but for now I am very happy for what it is. Next I was thinking that I would make a menubar, where I would put different options what users can use. These would be the core interactive use of my prototype. The menus would have diagnose, tests, and tools for example. 

I made a simple interative menu which has patient information, test, medical tool, diagnose menus. My next plan is to make some logic to them. I was thinking that patient information would have information like age, sex, weight, height etc. For the sake of prototype I will make the patient perfect candidate for heart attack. Test menu would consist of blood test and HMRI and maybe some other test which are basic protocols for heart attack. For the medical tool(I will rename this later) menu I was thinking putting CPR and defibilator options. These will change the user mouse to look like one of these and then interacting with the patient it would have some effect. Lastly, diagnose menu would pop up a diagnose text area(which is now visible) under the patient. I was thinking when submitting a diagnose the patient would collapse and timer would start and medical tool menu would come visible. These implemention I will cover later on, when I get there.

I have made now some logic to the interactive menu buttons. Patient information now displays patient information in a popup window which has some basic information like: name, sex, age, medical history, and current medications. Take test button opens a submenu where users can select blood test, EKG, and Heart MRI. When users presses any of those buttons, it pops up a picture of that type of test. Diagnose button opens up a diagnose form where users can give their diagnose about the patient. I also fixed a bug where activity log cleared after users submitted their diagnose. The bug fix was simple, I just made the activity log to store in localstorage, so whenever a page is refreshed, the information wont be cleared. Every popup pops in the same place which is between the patient picture and interactive menu. I made this decision for the sake of ease and there was a perfect place to put the popups in my opinion. Also I decided to put the diagnose form in the same place with the interactive menu popups. Firstly, my idea was to put the diagnose form under the patient picture, but for the sake of ease of use I decided to put it in the same place as every other popups. 

-IDEA patient information would be empty. Users must question the patient with basic questions like:
    -What is your name?
    - What is your gender?
    -How old are you?
    -Medical history questions:
        -Do you drink?
        -Do you smoke?
        -Have you any common diseases?
    -Medication questions:
        -Do you take any medications?

After questioning the patient information popup would have filled with answers. Easy idea: make a pool of questions where users take what they want and patient answers. Hard idea: make text area where users write questions and patient answers if some keywords are in them. I got this idea going back to my thesis and looked the reviews. In the review 1 I added the picture of that specific virtual patient simulation and there was this identifying data part where was question like I declared above. 

I made some edits to the test take test menu. Firstly, I had a idea that every sub menu (blood test, EKG, and Heart MRI) would just show a picture of those specific test. I decided to go with a different approach. I made a separate component for the blood test where I made a table to mimic a "realistic" blood test. The blood test results hints that the patient is having a heart attack. I am thinking also modifying the EKG menu to a separate component as well. For now, it shows a EKG picture which I found in this website (https://www.aclsmedicaltraining.com/ecg-in-acute-myocardial-infarction/), but the picture is pretty big and it would need more space to be visible. My idea is to make a new component and make a bigger popup that covers more screen. I could also edit the current TakeTest.tsx, but I will look that in the future. Also I have a idea for the Heart MRI that it would be a video of a MRI or GIF. I got this idea from this website (https://radiopaedia.org/cases/acute-myocardial-infarction-1). I will try to implement something similiar to this, but I wont waste too much time to figuring this out. If it is too much work to implement, I will go with a simple picture. These are my plans for now. Oh I almost forgot, that I made changes to the medical tools menu aswell. Now it has 2 options to choose from: CPR and defibilator. When users clicks them, the cursor changes. CPR makes the cursor as hands which are in CPR position and the defibilator makes the cursor look like defibilator. These will have use case in the future, when the patient collapses and emergency treatment is needed.

My next plan is to implemet the collapse of the patient. I was thinking that when users submits their diagnose, event would happen. That event would start with patient dialogue which says "Hey doc, I dont feels so good. ARRGGGHHH" and then the patient picture would change to him laying on the floor. Timer would then start and be visible. The time would start at 8:00 and tick down to 0. If the timer would reach to 0, the patient would die and new screen would pop up saying something along the lines "The patient has died.". Medical tools would be the thing to use here. Users should first perform CPR and there would be new window popup when selecting CPR. The window would count how many pumps the user has given. I need to look up on the Internet the correct amount CPR and make a threshold. After CPR the users should use defibilator. I need to also fact check this in the Internet. After some threshold the patient would regain heart beats and survive. After necessary after care, the simulation would end. This is my next objective, and I will start to work on this right now.

I made some improvements to my prototype. Firstly, I made the patient dialogue to its own component. For now it is very basic and the patient has fewq dialogues. I also made improvements into the diagnosis form. Now when the user submits his/hers diagnosis, event will trigger and the patient will suffer a cardiac arrest. The patient picture switches and a timer pops up above the patients picture. Timer will start from 8:00 and tick down to 0. Now it does not have any logic except it ticks down, but I will implement some in the future. I also added two new components which is vital signs and ECG line for the vital signs. These will show when the event happens and for now, they dont have any logic, but in the future they will have. Lastly, I made CPR and defibrillator to work. When the event happens and patient picture changes, CPR and defibrillators can be used to interact with the picture. I had to make some tweaks in interactivemenu.tsx file and simulation page to make this work. For now there are CPR and defibrillator counters which counts how many time the user has clicked the picture with these tools. CPR has 1,5 seconds delay and defibrilator has 2,0 seconds delay to prevent spam clicking. Both of these will have more logic and implementation in the future, but the basics are now working. I have thinked about the treatment cycle and here is a simplified version of the treatment cycle

    1. Patient collapses -> timer + vital signs pops up (flatline)
    2. User must select CPR and and click the patient 20-30 times
    3. User must select defibrillators and click the patient
    4. Repeat steps 2-3 couple times
    5. If done correctly last defibrillator will revive the patient
    6. Vital signs changes to show that patient is alive

    Here are the links which I used as a idea for the treatment methods:
    https://cpr.heart.org/en/resuscitation-science/cpr-and-ecc-guidelines/algorithms
    https://cpr.heart.org/en/resources/what-is-cpr
    https://www.resus.org.uk/library/2021-resuscitation-guidelines/epidemiology-cardiac-arrest-guidelines#introduction
    https://medlineplus.gov/suddencardiacarrest.html
    https://medlineplus.gov/hearthealthtests.html
    


Next, I will implement the treatment cycle which is described above.

I added a visual effect to CPR and defibrillators count. When CPR is available, the count text will be green and after users click the patient, the text will go red. After 1.5 seconds delay the text will change back to green. This will give users some idea to when give CPR. And after the CPR count goes to 30, the defibrillators count text will change to green to give users the same visual clue to use defibrillators correctly. Also I made some reviving logic to the patient. Now when users gives total of 60 CPR pushes and 2 defibrillator shocks, the patient revives and vitals change to show the patient is alive. For now, these vitals are just static and very basic, but they can be modified in the future. I think my prototype is got the basics and now it is time to implement feedback to the system. I will make few tweaks into the patient intervieving and gameplay loop, if I got the time, but for now I must go forward and make the feedback system. This system will be the last piece of my prototype and I want to make this done as soon as possible. My idea for this is that, when users has succesfully revived the patient, a new button will appear below the patient dialogue (or somewhere near the patient picture, or bottom middle of the screen) and that button will take the user into new page. The page would show every step taken during the simulation (activity log), give results if the patient survived, maybe a form where are questions about the simulation(what did the patient suffer? What is the CPR loop for cardiac arrest? etc.), and lastly some sort of self reflection about the simulation (How well did you perform? Was there any problems? etc.) 

Now I have implemented the basics of my prototype. It has everything what I was planning and the next couple days, I will make some tweaks in them.